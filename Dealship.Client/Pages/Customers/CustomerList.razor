@page "/customers"

@using Dealship.Shared
@using Dealship.Client.Services
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@* якщо компонент Pagination лежить у власному неймспейсі, додайте його тут *@
@* @using Dealship.Client.Components *@

@inject EntityApi<CustomerDto, CustomerDto> Api
@inject NavigationManager Nav
@inject IJSRuntime Js

<PageTitle>Customers</PageTitle>

<h3>Customers</h3>

<!-- Пошук + «New» -->
<div class="d-flex mb-3">
    <input class="form-control me-2"
           placeholder="Search…"
           @bind="qp.Search"
           @bind:event="oninput" />

    <button class="btn btn-outline-primary me-2" @onclick="OnSearch">Search</button>

    <button class="btn btn-success ms-auto"
            @onclick='() => Nav.NavigateTo("/customers/edit")'>
        <i class="bi bi-plus-lg"></i> New
    </button>
</div>

@if (isLoading)
{
    <div class="text-center"><em>Loading…</em></div>
}
else
{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th role="button" @onclick='() => Sort("FullName")'>
                    Name @SortIcon("FullName")
                </th>
                <th role="button" @onclick='() => Sort("Email")'>
                    Email @SortIcon("Email")
                </th>
                <th role="button" @onclick='() => Sort("PhoneNumber")'>
                    Phone @SortIcon("PhoneNumber")
                </th>
                <th style="width:120px;"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in items)
            {
                <tr>
                    <td>@c.FullName</td>
                    <td>@c.Email</td>
                    <td>@c.PhoneNumber</td>
                    <td class="text-end">
                        <button class="btn btn-sm btn-primary me-1"
                                @onclick='() => Nav.NavigateTo($"/customers/edit/{c.Id}")'>
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger"
                                @onclick='() => Delete(c.Id, c.FullName)'>
                            Del
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TotalItems="total"
                Page="qp.Page"
                Size="qp.Size"
                OnPageChanged="OnPageChanged" />
}

@code {
    private QueryParams qp = new();
    private IEnumerable<CustomerDto> items = Array.Empty<CustomerDto>();
    private int total;
    private bool isLoading;

    protected override async Task OnInitializedAsync() => await Load();

    private async Task Load()
    {
        isLoading = true;
        var res = await Api.GetPagedAsync(qp);
        items = res?.Items ?? Array.Empty<CustomerDto>();
        total = res?.Total ?? 0;
        isLoading = false;
    }

    private async Task OnSearch()
    {
        qp.Page = 1;
        await Load();
    }

    private void Sort(string field)
    {
        qp.Sort = qp.Sort == field ? field + "_desc" : field;
        qp.Page = 1;
        _ = Load();
    }

    private MarkupString SortIcon(string field) =>
        qp.Sort == field
            ? (MarkupString)"<i class=\"bi bi-caret-up-fill\"></i>"
            : qp.Sort == field + "_desc"
                ? (MarkupString)"<i class=\"bi bi-caret-down-fill\"></i>"
                : default;

    private async Task Delete(int id, string name)
    {
        if (await Js.InvokeAsync<bool>("confirm", $"Delete «{name}»?"))
        {
            await Api.DeleteAsync(id);
            await Load();
        }
    }

    private void OnPageChanged(int page)
    {
        qp.Page = page;
        _ = Load();
    }
}
